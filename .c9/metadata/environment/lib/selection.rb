{"filter":false,"title":"selection.rb","tooltip":"/lib/selection.rb","undoManager":{"mark":5,"position":5,"stack":[[{"start":{"row":0,"column":0},"end":{"row":226,"column":3},"action":"insert","lines":[" require 'sqlite3'"," "," module Selection","   def find(*ids)"," ","    if ids.length == 1","      find_one(ids.first)","    else","      ids.each do |id|","        if id.is_a?(Integer) && id > 0","          next","        else","          puts \"ERORR \"","          return -1","        end","      end","      rows = connection.execute <<-SQL","        SELECT #{columns.join \",\"} FROM #{table}","        WHERE id IN (#{ids.join(\",\")});","      SQL","","      rows_to_array(rows)","    end","   end","   ","   def find_one(id)","    if id.is_a?(Integer) && id > 0","      row = connection.get_first_row <<-SQL","        SELECT #{columns.join \",\"} FROM #{table}","        WHERE id = #{id};","      SQL","","      init_object_from_row(row)","    else","      puts \"EROR INVALID ID .\"","      return -1","    end","    end","    ","   end","   ","   def find_by(attribute, value)","     rows = connection.execute <<-SQL","       SELECT #{columns.join \",\"} FROM #{table}","       WHERE #{attribute} = #{BlocRecord::Utility.sql_strings(value)};","     SQL"," ","     rows_to_array(rows)","   end","   ","   def take(num=1)","     if num > 1","       rows = connection.execute <<-SQL","         SELECT #{columns.join \",\"} FROM #{table}","         ORDER BY random()","         LIMIT #{num};","       SQL"," ","       rows_to_array(rows)","     else","       take_one","     end","   end","   ","   def first","     row = connection.get_first_row <<-SQL","       SELECT #{columns.join \",\"} FROM #{table}","       ORDER BY id ASC LIMIT 1;","     SQL"," ","     init_object_from_row(row)","   end"," ","   def last","     row = connection.get_first_row <<-SQL","       SELECT #{columns.join \",\"} FROM #{table}","       ORDER BY id DESC LIMIT 1;","     SQL"," ","     init_object_from_row(row)","   end","   ","   def all","     rows = connection.execute <<-SQL","       SELECT #{columns.join \",\"} FROM #{table};","     SQL"," ","     rows_to_array(rows)","   end","   ","   ","   ","   def take_one","     row = connection.get_first_row <<-SQL","       SELECT #{columns.join \",\"} FROM #{table}","       ORDER BY random()","       LIMIT 1;","     SQL"," ","     init_object_from_row(row)","   end","   ","   ","  def find_each(start = nil , batch_size = 200)","    ","    if start != nil && batch_size != nil","      rows = connection.execute <<-SQL","        SELECT #{columns.join \",\"} FROM #{table}","        LIMIT #{batch_size} OFFSET #{start};","      SQL","    elsif start == nil && batch_size != nil","      rows = connection.execute <<-SQL","        SELECT #{columns.join \",\"} FROM #{table}","        LIMIT #{batch_size};","      SQL","    elsif start != nil && batch_size == nil","      rows = connection.execute <<-SQL","        SELECT #{columns.join \",\"} FROM #{table}","        OFFSET #{start};","      SQL","    else","      rows = connection.execute <<-SQL","        SELECT #{columns.join \",\"} FROM #{table};","      SQL","    end","","    row_array = rows_to_array(rows)","","    yield(row_array)","","  end","","  def find_in_batches(start, batch_size)","    rows = connection.execute <<-SQL","      SELECT #{columns.join \",\"} FROM #{table}","      LIMIT #{batch_size} OFFSET #{start};","    SQL","","    row_array = rows_to_array(rows)","","    yield(row_array)","  end","  ","     def where(*args)","     if args.count > 1","       expression = args.shift","       params = args","     else","       case args.first","       when String","         expression = args.first","       when Hash","         expression_hash = BlocRecord::Utility.convert_keys(args.first)","         expression = expression_hash.map {|key, value| \"#{key}=#{BlocRecord::Utility.sql_strings(value)}\"}.join(\" and \")","       end","     end"," ","     sql = <<-SQL","       SELECT #{columns.join \",\"} FROM #{table}","       WHERE #{expression};","     SQL"," ","     rows = connection.execute(sql, params)","     rows_to_array(rows)","   end","   ","   def order(*args)","     if args.count > 1","       order = args.join(\",\")","     else","       order = args.first.to_s","     end","     rows = connection.execute <<-SQL","       SELECT * FROM #{table}","       ORDER BY #{order};","     SQL","     rows_to_array(rows)","   end","   ","   def join(*args)","     if args.count > 1","       joins = args.map { |arg| \"INNER JOIN #{arg} ON #{arg}.#{table}_id = #{table}.id\"}.join(\" \")","       rows = connection.execute <<-SQL","         SELECT * FROM #{table} #{joins}","       SQL","     else","       case args.first","       when String","         rows = connection.execute <<-SQL","           SELECT * FROM #{table} #{BlocRecord::Utility.sql_strings(args.first)};","         SQL","       when Symbol","         rows = connection.execute <<-SQL","           SELECT * FROM #{table}","           INNER JOIN #{args.first} ON #{args.first}.#{table}_id = #{table}.id","         SQL","       end","     end"," ","     rows_to_array(rows)","   end","","   ","   private","   ","   def init_object_from_row(row)","     if row","       data = Hash[columns.zip(row)]","       new(data)","     end","   end","   ","   def rows_to_array(rows)","     collection = BlocRecord::Collection.new","     rows.each { |row| collection << new(Hash[columns.zip(row)]) }","     collection","   end"," end"," ","def method_missing(method_name, *args)","  ","  array = method_name.to_s.split(\"_\")","  att = array.last ","  ","  find_by(att, *args)","  ","end"],"id":1}],[{"start":{"row":217,"column":3},"end":{"row":217,"column":4},"action":"remove","lines":["d"],"id":2},{"start":{"row":217,"column":2},"end":{"row":217,"column":3},"action":"remove","lines":["n"]},{"start":{"row":217,"column":1},"end":{"row":217,"column":2},"action":"remove","lines":["e"]}],[{"start":{"row":216,"column":6},"end":{"row":217,"column":0},"action":"insert","lines":["",""],"id":3},{"start":{"row":217,"column":0},"end":{"row":217,"column":3},"action":"insert","lines":["   "]},{"start":{"row":217,"column":3},"end":{"row":217,"column":4},"action":"insert","lines":["e"]},{"start":{"row":217,"column":4},"end":{"row":217,"column":5},"action":"insert","lines":["n"]},{"start":{"row":217,"column":5},"end":{"row":217,"column":6},"action":"insert","lines":["d"]}],[{"start":{"row":216,"column":2},"end":{"row":216,"column":3},"action":"insert","lines":[" "],"id":4},{"start":{"row":216,"column":3},"end":{"row":216,"column":4},"action":"insert","lines":[" "]},{"start":{"row":216,"column":4},"end":{"row":216,"column":5},"action":"insert","lines":[" "]}],[{"start":{"row":216,"column":4},"end":{"row":216,"column":5},"action":"remove","lines":[" "],"id":5}],[{"start":{"row":215,"column":4},"end":{"row":215,"column":5},"action":"insert","lines":[" "],"id":6},{"start":{"row":215,"column":5},"end":{"row":215,"column":6},"action":"insert","lines":[" "]}]]},"ace":{"folds":[],"scrolltop":120,"scrollleft":0,"selection":{"start":{"row":16,"column":38},"end":{"row":16,"column":38},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1580628794358,"hash":"a133bd82e54bda0a2b083ace61ef563899feb627"}